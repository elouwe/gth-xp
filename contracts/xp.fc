#include "stdlib.fc";

;; ───────── Constants ─────────
const int OP_ADD_XP        = 0x1234;
const int CONTRACT_VERSION = 1;
const int ERR_NOT_OWNER    = 401;  ;; Not contract owner
const int ERR_OVERFLOW     = 402;  ;; XP overflow error
const int ERR_TOO_SOON     = 403;  ;; Operation called too soon
const int MIN_TIMEOUT      = 60;   ;; 1 minute in seconds

;; ─────── Storage Helpers ───────
(slice, int, int, cell) _load_state() inline {
    cell raw = get_data();
    if (null?(raw)) {
        return (null(), CONTRACT_VERSION, 0, null());
    }
    slice s     = raw.begin_parse();
    slice owner = s~load_msg_addr();
    int   ver   = s~load_uint(16);
    int   last_op_time = s~load_uint(32);
    cell  dict  = s~load_dict();
    return (owner, ver, last_op_time, dict);
}

() _store_state(slice owner, int ver, int last_op_time, cell dict) impure inline {
    set_data(
        begin_cell()
            .store_slice(owner)
            .store_uint(ver, 16)
            .store_uint(last_op_time, 32)
            .store_dict(dict)
        .end_cell()
    );
}

;; ───────── Entry Point ─────────
() recv_internal(int msg_value, cell in_msg, slice in_body) impure {
    int now = now();
    
    if (slice_bits(in_body) == 0) {
        accept_message();
        slice cs     = in_msg.begin_parse();
        cs~load_uint(4);         ;; skip flags
        slice sender = cs~load_msg_addr();
        cs~load_coins();          ;; skip value
        cs~load_uint(64);         ;; skip lt
        cs~load_uint(32);         ;; skip now
        var (owner0, ver0, last_op0, dict0) = _load_state();
        if (slice_bits(owner0) == 0) {
            ;; Initialize with last_op_time = 0
            _store_state(sender, CONTRACT_VERSION, 0, dict0);
        }
        return ();
    }
    
    ;; Read opcode and skip 4-bit flags
    int op = in_body~load_uint(32);
    in_body~load_uint(4);

    if (op == OP_ADD_XP) {
        slice user_addr = in_body~load_msg_addr();
        int   amount    = in_body~load_uint(64);

        slice cs     = in_msg.begin_parse();
        cs~load_uint(4);         ;; skip flags
        slice sender = cs~load_msg_addr();
        cs~load_coins();          ;; skip value
        cs~load_uint(64);         ;; skip lt
        cs~load_uint(32);         ;; skip now

        var (owner, ver, last_op_time, dict) = _load_state();
        throw_unless(ERR_NOT_OWNER, sender.slice_hash() == owner.slice_hash());
        
        ;; Enforce cooldown period after first operation
        if (last_op_time > 0) {
            throw_unless(ERR_TOO_SOON, now - last_op_time >= MIN_TIMEOUT);
        }
        accept_message();

        int key = user_addr.slice_hash();
        var (v, found) = dict.udict_get?(256, key);
        int old_xp = found ? v~load_uint(64) : 0;
        int new_xp = old_xp + amount;
        throw_unless(ERR_OVERFLOW, new_xp >= old_xp);       ;; Check overflow
        throw_unless(ERR_OVERFLOW, new_xp <= 18446744073709551615);  ;; Max uint64
        builder b = begin_cell().store_uint(new_xp, 64);
        dict = dict.udict_set_builder(256, key, b);
        
        ;; Update last operation timestamp
        _store_state(owner, ver, now, dict);
    }
}

;; ───────── Get Methods ─────────
(int) get_xp(slice args) impure method_id {
    if (slice_bits(args) == 0) { return 0; }
    try {
        slice user_addr = args~load_msg_addr();
        int key = user_addr.slice_hash();
        var (_o, _v, _t, dict) = _load_state();
        if (null?(dict)) { return 0; }
        var (v, found) = dict.udict_get?(256, key);
        return found ? v~load_uint(64) : 0;
    } catch (e) {
        return 0;
    }
}

(int) get_xp_by_key(slice args) impure method_id {
    int key = args~load_uint(256);
    var (_o,_v, _t, dict) = _load_state();
    if (null?(dict)) { return 0; }
    var (v,found) = dict.udict_get?(256, key);
    return found ? v~load_uint(64) : 0;
}

(slice) get_owner() impure method_id {
    var (owner, _v, _t, _d) = _load_state();
    return owner;
}

(int) get_version() impure method_id {
    var (_o, ver, _t, _d) = _load_state();
    return ver;
}

(int) get_last_op_time() impure method_id {
    var (_o, _v, last_op_time, _d) = _load_state();
    return last_op_time;
}

(int) get_level(int xp) impure method_id {
    throw_unless(301, xp >= 0);  ;; XP cannot be negative
    if (xp < 100)  { return 0; }
    if (xp < 250)  { return 1; }
    if (xp < 500)  { return 2; }
    return 3;
}

(int) get_rank(int xp) impure method_id {
    return get_level(xp);
}

(int) get_reputation(int xp, int d, int r, int bw) impure method_id {
    ;; Validate input parameters
    throw_unless(310, (xp >= 0) & (d >= 0) & (r >= 0) & (bw >= 0));
    int score = (xp / 10) + (d * 2) + (r * 5) - (bw * 10) + 18;
    if (score < 0)  { score = 0; }     ;; Clamp minimum
    if (score > 100){ score = 100; }   ;; Clamp maximum
    return score;
}

;; ───────── Debug Method ─────────
(int) get_xp_key(slice args) impure method_id {
    if (slice_bits(args) == 0) { return 0; }
    slice user_addr = args~load_msg_addr();
    return user_addr.slice_hash();
}